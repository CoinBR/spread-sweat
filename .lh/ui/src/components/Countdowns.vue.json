{
    "sourceFile": "ui/src/components/Countdowns.vue",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 5,
            "patches": [
                {
                    "date": 1699021085253,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1699021090319,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,259 @@\n+<script lang=\"ts\">\n+import { ref, computed, watch, defineProps } from 'vue';\n+\n+\n+interface Exercise {\n+  initial: number;\n+  tag: string;\n+}\n+\n+interface Countdown extends Exercise {\n+  value: number;\n+}\n+\n+const props = defineProps({\n+  apiLoadStateEndpoint: {\n+    type: String,\n+    required: true\n+  },\n+  apiSaveStateEndpoint: {\n+    type: String,\n+    required: true\n+  }\n+})\n+\n+export default {\n+\n+\n+  setup() {\n+\n+    const day = ref<number>(3);\n+    const loading = ref<boolean>(true);\n+\n+    function circularIndex(arrFun: () => Exercise[], indexFun: () => number): Exercise {\n+      const arr = arrFun();\n+      const index = indexFun();\n+\n+      if (arr.length === 0)\n+        throw new Error(\"empty array\");\n+\n+      let circularIndex = (index - 1) % arr.length;\n+\n+      if (circularIndex < 0)\n+        circularIndex += arr.length;\n+\n+      return arr[circularIndex];\n+    }\n+\n+    const extraExerciseForDay = circularIndex;\n+\n+    const a = (): Exercise[] => [\n+      { initial: 10, tag: 'Supino Reto' },\n+      { initial: 20, tag: 'Supino Inclinado' },\n+      { initial: 10, tag: 'Crucifixo Inclinado' },\n+\n+      { initial: 20, tag: 'Desenvolvimento' },\n+      { initial: 10, tag: 'Elevação Frontal' },\n+      { initial: 10, tag: 'Elevação Lateral' },\n+\n+      { initial: 20, tag: 'Testa' },\n+      { initial: 20, tag: 'Paralelas' },\n+    ];\n+\n+    const b = (): Exercise[] => [\n+      { initial: 10, tag: 'Levantamento Terra' },\n+\n+      { initial: 10, tag: 'Remada Curvada Cima' },\n+      { initial: 10, tag: 'Remada Curvada Meio' },\n+      { initial: 10, tag: 'Remada Curvada Baixo' },\n+\n+      { initial: 10, tag: 'Remada Alta' },\n+      { initial: 20, tag: 'Encolhimento Ombros' },\n+\n+      { initial: 20, tag: 'Rosca Direta' },\n+      { initial: 20, tag: 'Rosca Martelo' },\n+\n+      { initial: 10, tag: 'Manguito' },\n+    ];\n+\n+    const leg = (): Exercise[] => [\n+      { initial: 15, tag: 'Sumô' },\n+      { initial: 15, tag: 'Afundo' },\n+      { initial: 15, tag: 'Elevacao Pelvica' },\n+      { initial: 15, tag: 'Agachamento' },\n+      { initial: 15, tag: 'Stiff' },\n+    ]\n+\n+    const calf = (): Exercise[] => [\n+      { initial: 15, tag: 'Panturrilha Sentado' },\n+      { initial: 15, tag: 'Panturrilha em Pé' },\n+    ]\n+\n+    // todo panturrilha\n+\n+    const abs = (): Exercise[] => [\n+      { initial: 15, tag: 'Abs Obliquos' },\n+      { initial: 15, tag: 'Abs Supra' },\n+      { initial: 15, tag: 'Abs Infra' },\n+    ]\n+\n+    const pulso = (): Exercise[] => [\n+      { initial: 10, tag: 'Pulso Cima' },\n+      { initial: 10, tag: 'Pulso Baixo' },\n+    ]\n+\n+\n+    const baseForDay = (): Exercise[] => day.value % 2 == 0 ? b() : a();\n+\n+    const extraForDay = (): Exercise[] =>\n+      [leg, calf, abs, pulso]\n+        .map(group => extraExerciseForDay(group, () => day.value))\n+        .flat();\n+\n+    const selected = (): Exercise[] => [\n+      ...baseForDay(),\n+      ...extraForDay()\n+    ];\n+\n+    const countdowns = ref<Countdown[]>(\n+      selected().map(countdown => ({ ...countdown, value: countdown.initial }))\n+    );\n+\n+    const subtract = (countdown: Countdown, amount: number): void => {\n+      countdown.value -= amount;\n+    };\n+\n+    const add = (countdown: Countdown): void => {\n+      if (countdown.value < countdown.initial) {\n+        countdown.value++;\n+      }\n+    };\n+\n+    const reset = (countdown: Countdown): void => {\n+      countdown.value = countdown.value === 0 ? countdown.initial : 0;\n+    };\n+\n+    const totalValue = computed((): number => {\n+      return countdowns.value.reduce((sum, countdown) => sum + countdown.value, 0);\n+    });\n+\n+    watch(countdowns, () => {\n+      if (!loading.value)\n+        saveState();\n+    }, { deep: true });\n+\n+    const fetchData = async (): Promise<void> => {\n+      const response = await fetch(\"aaaaa\");\n+      const data = await response.json();\n+\n+      countdowns.value = data.countdowns;\n+      day.value = data.day;\n+\n+      loading.value = false;\n+    };\n+\n+    const saveState = async (): Promise<void> => {\n+      await fetch(props.apiSaveStateEndpoint, {\n+        method: 'POST',\n+        headers: {\n+          'Content-Type': 'application/json'\n+        },\n+        body: JSON.stringify({\n+          day: day.value,\n+          countdowns: countdowns.value\n+        })\n+      });\n+    };\n+\n+    const changeDay = async (delta: number): Promise<void> => {\n+      if (loading.value)\n+        return;\n+\n+      loading.value = true;\n+\n+      day.value += delta;\n+      reinitializeCountdowns();\n+      await saveState();\n+\n+      loading.value = false;\n+    };\n+\n+    const reinitializeCountdowns = (): void => {\n+      countdowns.value = selected().map(countdown => ({ ...countdown, value: countdown.initial }));\n+    };\n+\n+    fetchData(); // Load state when the app initializes.\n+\n+    return { day, countdowns, subtract, add, reset, totalValue, changeDay };\n+  },\n+};\n+</script>\n+\n+<template></template>\n+\n+<style>\n+.countdown-container {\n+  display: flex;\n+  align-items: center;\n+  border: 1px solid #555;\n+  padding: 10px;\n+  margin: 10px 0;\n+  background-color: #444;\n+  justify-content: flex-end;\n+}\n+\n+.countdown-tag {\n+  cursor: pointer;\n+  margin-left: 10px;\n+  width: 20rem;\n+}\n+\n+.countdown-value {\n+  margin: 0 20px;\n+  font-size: 1.5em;\n+}\n+\n+.total-row {\n+  background-color: #666;\n+  font-weight: bold;\n+}\n+\n+input {\n+  background-color: #555;\n+  color: #f5f5f5;\n+  border: none;\n+  font-size: 1.5em;\n+  text-align: center;\n+  width: 3em;\n+}\n+\n+input:focus {\n+  outline: none;\n+}\n+\n+button {\n+  margin: 3px;\n+  background-color: #555;\n+  color: #f5f5f5;\n+  border: 1px solid #666;\n+  padding: 5px 10px;\n+  cursor: pointer;\n+  transition: background-color 0.3s;\n+}\n+\n+button:hover {\n+  background-color: #666;\n+}\n+\n+button:active {\n+  background-color: #777;\n+}\n+\n+.faded-value {\n+  color: #666;\n+}\n+\n+#app {\n+  max-width: 53rem;\n+}\n+</style>\n\\ No newline at end of file\n"
                },
                {
                    "date": 1699021113907,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -142,9 +142,9 @@\n         saveState();\n     }, { deep: true });\n \n     const fetchData = async (): Promise<void> => {\n-      const response = await fetch(\"aaaaa\");\n+      const response = await fetch(props.apiLoadStateEndpoint);\n       const data = await response.json();\n \n       countdowns.value = data.countdowns;\n       day.value = data.day;\n"
                },
                {
                    "date": 1699021177258,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,8 +10,10 @@\n interface Countdown extends Exercise {\n   value: number;\n }\n \n+export default {\n+\n const props = defineProps({\n   apiLoadStateEndpoint: {\n     type: String,\n     required: true\n@@ -21,11 +23,11 @@\n     required: true\n   }\n })\n \n-export default {\n \n \n+\n   setup() {\n \n     const day = ref<number>(3);\n     const loading = ref<boolean>(true);\n"
                },
                {
                    "date": 1699021190563,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,22 +10,22 @@\n interface Countdown extends Exercise {\n   value: number;\n }\n \n+const props = defineProps({\n+  apiLoadStateEndpoint: {\n+    type: String,\n+    required: true\n+  },\n+  apiSaveStateEndpoint: {\n+    type: String,\n+    required: true\n+  }\n+})\n+\n export default {\n \n-  const props = defineProps({\n-    apiLoadStateEndpoint: {\n-      type: String,\n-      required: true\n-    },\n-    apiSaveStateEndpoint: {\n-      type: String,\n-      required: true\n-    }\n-  })\n \n-\n   setup() {\n \n     const day = ref<number>(3);\n     const loading = ref<boolean>(true);\n"
                },
                {
                    "date": 1699021427529,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,9 @@\n \n export default {\n \n \n-  setup() {\n+  setup(props) {\n \n     const day = ref<number>(3);\n     const loading = ref<boolean>(true);\n \n"
                }
            ],
            "date": 1699021085253,
            "name": "Commit-0",
            "content": ""
        }
    ]
}