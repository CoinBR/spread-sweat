{
    "sourceFile": "src/ui/src/components/Countdowns.vue",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1698869546104,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1698869624163,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -179,5 +179,79 @@\n     }\n };\n \n Vue.createApp(App).mount(\"#app\");\n-</script>\n\\ No newline at end of file\n+</script>\n+\n+\n+<template>  \n+</template>\n+\n+<style>\n+ .countdown-container {\n+      display: flex;\n+      align-items: center;\n+      border: 1px solid #555;\n+      padding: 10px;\n+      margin: 10px 0;\n+      background-color: #444;\n+      justify-content: flex-end;\n+    }\n+\n+    .countdown-tag {\n+      cursor: pointer;\n+      margin-left: 10px;\n+      width: 20rem;\n+    }\n+\n+    .countdown-value {\n+      margin: 0 20px;\n+      font-size: 1.5em;\n+    }\n+\n+    .total-row {\n+      background-color: #666;\n+      font-weight: bold;\n+    }\n+\n+    input {\n+      background-color: #555;\n+      color: #f5f5f5;\n+      border: none;\n+      font-size: 1.5em;\n+      text-align: center;\n+      width: 3em;\n+    }\n+\n+    input:focus {\n+      outline: none;\n+    }\n+\n+    button {\n+      margin: 3px;\n+      background-color: #555;\n+      color: #f5f5f5;\n+      border: 1px solid #666;\n+      padding: 5px 10px;\n+      cursor: pointer;\n+      transition: background-color 0.3s;\n+    }\n+\n+    button:hover {\n+      background-color: #666;\n+    }\n+\n+    button:active {\n+      background-color: #777;\n+    }\n+\n+    .faded-value {\n+      color: #666;\n+      /* Adjust this to your desired shade of gray */\n+    }\n+\n+    #app {\n+      max-width: 53rem;\n+    }\n+  </style>\n+\n+</style>\n\\ No newline at end of file\n"
                },
                {
                    "date": 1698869636430,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -250,5 +250,5 @@\n \n #app {\n     max-width: 53rem;\n }\n-</style></style>\n\\ No newline at end of file\n+</style>\n\\ No newline at end of file\n"
                }
            ],
            "date": 1698869546104,
            "name": "Commit-0",
            "content": " <script>\n    const { ref, computed, watch } = Vue;\n\n    const App = {\n      setup() {\n\n        const day = ref(3);\n        const loading = ref(true);\n\n        function circularIndex(arrFun, indexFun) {\n\n          const arr = arrFun()\n          const index = indexFun()\n\n          if (arr.length === 0)\n            throw \"empty array\"\n\n          let circularIndex = (index - 1) % arr.length;\n\n          if (circularIndex < 0)\n            circularIndex += arr.length;\n\n          return arr[circularIndex];\n        }\n\n        const extraExerciseForDay = circularIndex\n\n\n        const a = () => [\n          { initial: 10, tag: 'Supino Reto' },\n          { initial: 20, tag: 'Supino Inclinado' },\n          { initial: 10, tag: 'Crucifixo Inclinado' },\n\n          { initial: 20, tag: 'Desenvolvimento' },\n          { initial: 10, tag: 'Elevação Frontal' },\n          { initial: 10, tag: 'Elevação Lateral' },\n\n          { initial: 20, tag: 'Testa' },\n          { initial: 20, tag: 'Paralelas' },\n        ]\n\n        const b = () => [\n          { initial: 10, tag: 'Levantamento Terra' },\n\n          { initial: 10, tag: 'Remada Curvada Cima' },\n          { initial: 10, tag: 'Remada Curvada Meio' },\n          { initial: 10, tag: 'Remada Curvada Baixo' },\n\n          { initial: 10, tag: 'Remada Alta' },\n          { initial: 20, tag: 'Encolhimento Ombros' },\n\n          { initial: 20, tag: 'Rosca Direta' },\n          { initial: 20, tag: 'Rosca Martelo' },\n\n          { initial: 10, tag: 'Manguito' },\n        ]\n\n\n        const leg = () => [\n          { initial: 15, tag: 'Sumô' },\n          { initial: 15, tag: 'Afundo' },\n          { initial: 15, tag: 'Elevacao Pelvica' },\n          { initial: 15, tag: 'Agachamento' },\n          { initial: 15, tag: 'Stiff' },\n        ]\n\n        const calf = () => [\n          { initial: 15, tag: 'Panturrilha Sentado' },\n          { initial: 15, tag: 'Panturrilha em Pé' },\n        ]\n\n        // todo panturrilha\n\n        const abs = () => [\n          { initial: 15, tag: 'Abs Obliquos' },\n          { initial: 15, tag: 'Abs Supra' },\n          { initial: 15, tag: 'Abs Infra' },\n        ]\n\n        const pulso = () => [\n          { initial: 10, tag: 'Pulso Cima' },\n          { initial: 10, tag: 'Pulso Baixo' },\n        ]\n\n\n        const baseForDay = () => day.value % 2 == 0 ? b() : a()\n\n        const extraForDay = () => [leg, calf, abs, pulso]\n          .map(group => extraExerciseForDay(group, () => day.value))\n\n\n        selected = () => []\n          .concat(baseForDay())\n          .concat(extraForDay())\n\n\n        countdowns = ref(\n          selected()\n            .map(countdown => { return { value: countdown.initial, ...countdown } })\n        );\n\n        const subtract = (countdown, amount) => {\n          countdown.value -= amount;\n        };\n\n        const add = (countdown) => {\n          if (countdown.value < countdown.initial) {\n            countdown.value++;\n          }\n        };\n\n        const reset = (countdown) => {\n          const newValue = countdown.value == 0\n            ? countdown.initial\n            : 0\n\n          countdown.value = newValue\n        };\n\n\n        const totalValue = computed(() => {\n          return countdowns.value.reduce((sum, countdown) => sum + countdown.value, 0);\n        });\n\n        watch(countdowns, () => {\n          if (!loading.value)\n            saveState();\n        }, { deep: true });\n\n        const fetchData = async () => {\n          const response = await fetch('/getState');\n          const data = await response.json();\n\n          countdowns.value = data.countdowns;\n          day.value = data.day;\n\n          loading.value = false\n        };\n\n        const saveState = async () => {\n          await fetch('/saveState', {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n              day: day.value,\n              countdowns: countdowns.value\n            })\n          });\n        };\n\n        const changeDay = async (delta) => {\n          if (loading.value)\n            return\n\n          loading.value = true\n\n          day.value += delta;\n          reinitializeCountdowns();\n          await saveState();\n\n          loading.value = false\n        };\n\n        const reinitializeCountdowns = () => {\n          loading.value = true\n\n          countdowns.value = selected().map(countdown => {\n            return { value: countdown.initial, ...countdown }\n          });\n\n          loading.value = false\n        };\n\n        fetchData();  // Load state when the app initializes.\n\n        return { day, countdowns, subtract, add, reset, totalValue, changeDay };\n      }\n    };\n\n    Vue.createApp(App).mount(\"#app\");\n  </script>"
        }
    ]
}